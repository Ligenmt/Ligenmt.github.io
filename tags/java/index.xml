<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Ligen的笔记</title>
    <link>https://ligenmt.github.io/tags/java/</link>
    <description>Recent content in java on Ligen的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Copyright Text</copyright>
    <lastBuildDate>Mon, 13 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ligenmt.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>手写极简版mybatis</title>
      <link>https://ligenmt.github.io/post/%E6%89%8B%E5%86%99%E6%9E%81%E7%AE%80%E7%89%88mybatis/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ligenmt.github.io/post/%E6%89%8B%E5%86%99%E6%9E%81%E7%AE%80%E7%89%88mybatis/</guid>
      <description>一直以来都在使用mybatis来操作mysql数据库，也对它的技术原理很好奇，例如：它的配置文件是以什么方式读取的？我们使用的自动注入的Mapper是怎么实现的？
最近将mybatis的源码学习了一下，实现了一个简易版本的mybatis，用于方便理解它的运行原理。简单起见，我们只实现了利用jdbc连接mysql，读取mappers配置文件，利用动态代理mapper接口来操作数据库。
自己画了个mybatis执行的大致流程图，之后的实现基本上基于这个图来做。
mybatis的核心当然是那一堆熟悉的xml格式配置文件。这是一个配置文件的简单样例，看下它的内容：
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE mapper PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot; &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt; &amp;lt;mapper namespace=&amp;quot;com.ligen.javalab.mybatis.mapper.PUserMapper&amp;quot;&amp;gt; &amp;lt;select id=&amp;quot;selectByPrimaryKey&amp;quot; resultType=&amp;quot;com.ligen.javalab.mybatis.entity.PUser&amp;quot;&amp;gt; select * from product_1_user where id = ? &amp;lt;/select&amp;gt; &amp;lt;select id=&amp;quot;selectAll&amp;quot; resultType=&amp;quot;com.ligen.javalab.mybatis.entity.PUser&amp;quot;&amp;gt; select * from product_1_user &amp;lt;/select&amp;gt; &amp;lt;/mapper&amp;gt;  PUser是用于测试随便建的一个表的模型映射：
public class PUser { Long id; Long user_id; //省略get set }  就俩字段，一个主键一个userid。sql就是一个简单的根据主键查询。
对应的mapper接口也就出来了：
public interface PUserMapper { PUser selectByPrimaryKey(Long id); List&amp;lt;PUser&amp;gt; selectAll(); }  mapper标签带有一个namespace属性，里面有两个select标签，有id和resultType两个属性，标签内容为具体的sql语句。我们需要将每一条sql语句都解析好保存到一个容器（一个map就行）中，以便之后使用。
可以为每个sql抽象出一个实体类：
public class MapperStatement { String namespace; //对应mapper中的namespace String id; //对应select中的id String resultType; //对应select中的resultType String sql; //对应具体的sql //省略get set }  根据上图，首先我们需要一个Configuration类，用于存放连接数据库的相关信息和解析mappers配置。</description>
    </item>
    
    <item>
      <title>Java发送邮件工具类</title>
      <link>https://ligenmt.github.io/post/java%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%B7%A5%E5%85%B7%E7%B1%BB/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ligenmt.github.io/post/java%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E5%B7%A5%E5%85%B7%E7%B1%BB/</guid>
      <description>依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;javax.mail&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mail&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4.7&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  模板代码 /** * Created by ligen on 2017/12/27. */ public class EmailUtil { private static Logger logger = LoggerFactory.getLogger(EmailUtil.class); static final String SSL_FACTORY = &amp;quot;javax.net.ssl.SSLSocketFactory&amp;quot;; public static void init() { Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider()); props = new Properties(); props.put(&amp;quot;mail.smtp.auth&amp;quot;, &amp;quot;true&amp;quot;); props.setProperty(&amp;quot;mail.smtp.socketFactory.class&amp;quot;, SSL_FACTORY); props.setProperty(&amp;quot;mail.smtp.socketFactory.fallback&amp;quot;, &amp;quot;false&amp;quot;); props.setProperty(&amp;quot;mail.smtp.port&amp;quot;, &amp;quot;465&amp;quot;); props.setProperty(&amp;quot;mail.smtp.socketFactory.port&amp;quot;, &amp;quot;465&amp;quot;); props.put(&amp;quot;mail.smtp.host&amp;quot;, &amp;quot;smtp.exmail.qq.com&amp;quot;); // 发件人的账号 props.put(&amp;quot;mail.user&amp;quot;, &amp;quot;xxx@xxx.net&amp;quot;); // 访问SMTP服务时需要提供的密码 props.put(&amp;quot;mail.password&amp;quot;, &amp;quot;xxx&amp;quot;); } public static void sendEmail(String title, String content, Collection&amp;lt;String&amp;gt; targetUsers, String contentType) { if (title.</description>
    </item>
    
    <item>
      <title>Springboot配置Rabbitmq</title>
      <link>https://ligenmt.github.io/post/springboot%E4%B8%ADrabbitmq%E5%9B%9B%E7%A7%8D%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ligenmt.github.io/post/springboot%E4%B8%ADrabbitmq%E5%9B%9B%E7%A7%8D%E4%BA%A4%E6%8D%A2%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/</guid>
      <description>Springboot 配置 spring.rabbitmq.host=localhost spring.rabbitmq.port=5672 spring.rabbitmq.username=guest spring.rabbitmq.password=guest spring.rabbitmq.virtual-host=/ #消费者数量 spring.rabbitmq.listener.simple.concurrency=10 spring.rabbitmq.listener.simple.max-concurrency=10 #每次取几个 spring.rabbitmq.listener.simple.prefetch=1 spring.rabbitmq.listener.simple.auto-startup=true spring.rabbitmq.listener.simple.default-requeue-rejected=true spring.rabbitmq.template.retry.enabled=true spring.rabbitmq.template.retry.initial-interval=1000 spring.rabbitmq.template.retry.max-attempts=3 spring.rabbitmq.template.retry.max-interval=10000 spring.rabbitmq.template.retry.multiplier=1  配置类 package com.ligen.javalab.rabbitmq; import org.springframework.amqp.core.*; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import java.util.HashMap; import java.util.Map; @Configuration public class MQConfig { public static final String QUEUE = &amp;quot;queue&amp;quot;; public static final String TOPIC_QUEUE1 = &amp;quot;topic.queue.1&amp;quot;; public static final String TOPIC_QUEUE2 = &amp;quot;topic.queue.2&amp;quot;; public static final String FANOUT_QUEUE1 = &amp;quot;fanout.queue.1&amp;quot;; public static final String FANOUT_QUEUE2 = &amp;quot;fanout.</description>
    </item>
    
  </channel>
</rss>