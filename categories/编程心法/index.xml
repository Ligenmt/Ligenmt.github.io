<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程心法 on Ligen的笔记</title>
    <link>https://ligenmt.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BF%83%E6%B3%95/</link>
    <description>Recent content in 编程心法 on Ligen的笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2015 Copyright Text</copyright>
    <lastBuildDate>Mon, 13 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ligenmt.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BF%83%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>手写极简版mybatis</title>
      <link>https://ligenmt.github.io/post/%E6%89%8B%E5%86%99%E6%9E%81%E7%AE%80%E7%89%88mybatis/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ligenmt.github.io/post/%E6%89%8B%E5%86%99%E6%9E%81%E7%AE%80%E7%89%88mybatis/</guid>
      <description>一直以来都在使用mybatis来操作mysql数据库，也对它的技术原理很好奇，例如：它的配置文件是以什么方式读取的？我们使用的自动注入的Mapper是怎么实现的？
最近将mybatis的源码学习了一下，实现了一个简易版本的mybatis，用于方便理解它的运行原理。简单起见，我们只实现了利用jdbc连接mysql，读取mappers配置文件，利用动态代理mapper接口来操作数据库。
自己画了个mybatis执行的大致流程图，之后的实现基本上基于这个图来做。
mybatis的核心当然是那一堆熟悉的xml格式配置文件。这是一个配置文件的简单样例，看下它的内容：
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;!DOCTYPE mapper PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot; &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt; &amp;lt;mapper namespace=&amp;quot;com.ligen.javalab.mybatis.mapper.PUserMapper&amp;quot;&amp;gt; &amp;lt;select id=&amp;quot;selectByPrimaryKey&amp;quot; resultType=&amp;quot;com.ligen.javalab.mybatis.entity.PUser&amp;quot;&amp;gt; select * from product_1_user where id = ? &amp;lt;/select&amp;gt; &amp;lt;select id=&amp;quot;selectAll&amp;quot; resultType=&amp;quot;com.ligen.javalab.mybatis.entity.PUser&amp;quot;&amp;gt; select * from product_1_user &amp;lt;/select&amp;gt; &amp;lt;/mapper&amp;gt;  PUser是用于测试随便建的一个表的模型映射：
public class PUser { Long id; Long user_id; //省略get set }  就俩字段，一个主键一个userid。sql就是一个简单的根据主键查询。
对应的mapper接口也就出来了：
public interface PUserMapper { PUser selectByPrimaryKey(Long id); List&amp;lt;PUser&amp;gt; selectAll(); }  mapper标签带有一个namespace属性，里面有两个select标签，有id和resultType两个属性，标签内容为具体的sql语句。我们需要将每一条sql语句都解析好保存到一个容器（一个map就行）中，以便之后使用。
可以为每个sql抽象出一个实体类：
public class MapperStatement { String namespace; //对应mapper中的namespace String id; //对应select中的id String resultType; //对应select中的resultType String sql; //对应具体的sql //省略get set }  根据上图，首先我们需要一个Configuration类，用于存放连接数据库的相关信息和解析mappers配置。</description>
    </item>
    
    <item>
      <title>SpringCloud-Zuul源码分析和路由改造</title>
      <link>https://ligenmt.github.io/post/springcloud-zuul%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%92%8C%E8%B7%AF%E7%94%B1%E6%94%B9%E9%80%A0/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ligenmt.github.io/post/springcloud-zuul%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%92%8C%E8%B7%AF%E7%94%B1%E6%94%B9%E9%80%A0/</guid>
      <description>在使用SpringCloud的时候准备使用Zuul作为微服务的网关，Zuul的默认路由方式主要是两种，一种是在配置 文件里直接指定静态路由，另一种是根据注册在Eureka的服务名自动匹配。比如如果有一个名为service1的服 务，通过 http://www.domain.com/service1/xxx 就能访问到这个服务。但是这和我预想的需求还是有些差距。 网上有许多有关动态路由的实现方法，大致思想是不从Eureka拉取注册服务信息，而是在数据库里自己维护一 份路由表，定时读取数据库拉取路由，来实现自动更新。而我的需求更进一步，我希望对外暴露的网关接口是 一个固定的url，如http://www.domain.com/gateway ，然后根据一个头信息service来指定想要访问的服务，而不是在 url后面拼接服务名。同时我也不想将我注册到Eureka的服务名直接暴露在api中，而是做一层映射，让我可以 灵活指定serivce名。
例如：
 访问 http://www.domain.com/gateway ,headers包含service=service.a，调用后端service1 访问 http://www.domain.com/gateway ,headers包含service=service.b，调用后端service2  现在研究一下Zuul的源码来看看怎么实现这个功能。
我们都知道在Springboot启动类上加一个@EnableZuulProxy就启用了Zuul。从这个注解点进去看看：
@EnableCircuitBreaker @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Import(ZuulProxyMarkerConfiguration.class) public @interface EnableZuulProxy { }  它引入了ZuulProxyMarkerConfiguration这个配置，进去看下。
/** * Responsible for adding in a marker bean to trigger activation of * {@link ZuulProxyAutoConfiguration}. * * @author Biju Kunjummen */ @Configuration public class ZuulProxyMarkerConfiguration { @Bean public Marker zuulProxyMarkerBean() { return new Marker(); } class Marker { } }  从注释中看到这个是用于激活ZuulProxyAutoConfiguration，看看这个类</description>
    </item>
    
    <item>
      <title>go广度优先求解迷宫</title>
      <link>https://ligenmt.github.io/post/go%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%B1%82%E8%A7%A3%E8%BF%B7%E5%AE%AB/</link>
      <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ligenmt.github.io/post/go%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%B1%82%E8%A7%A3%E8%BF%B7%E5%AE%AB/</guid>
      <description>正在学习慕课网go语言视频，实现了一个广度优先的迷宫走法搜索。
迷宫文件maze.in:
其中第一行表示迷宫的行列数，1表示障碍，0表示可走。
6 5 0 1 0 0 0 0 0 0 1 0 0 1 0 1 0 1 1 1 0 0 0 1 0 0 1 0 1 0 0 0  以下是实现：
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; ) /** 广度优先走迷宫 */ func main() { maze := readMaze(&amp;quot;maze/maze.in&amp;quot;) for _, row := range maze { for _, val := range row { fmt.Printf(&amp;quot;%d &amp;quot;, val) } fmt.</description>
    </item>
    
  </channel>
</rss>